diff --git a/ebay_tools/ebay_tools/apps/processor.py b/ebay_tools/ebay_tools/apps/processor.py
index 1234567..abcdefg 100644
--- a/ebay_tools/ebay_tools/apps/processor.py
+++ b/ebay_tools/ebay_tools/apps/processor.py
@@ -66,6 +66,8 @@ class EbayLLMProcessor:
         self.work_queue = []
         self.current_item_index = -1
         self.current_photo_index = -1
+        self.selected_items = set()  # Track selected items for processing
+        self.item_checkboxes = {}  # Store checkbox widgets
         self.api_client = None  # Will be initialized with configuration
         self.processing = False
         self.processing_thread = None  # For background processing
@@ -119,12 +121,17 @@ class EbayLLMProcessor:
     
     def create_frames(self):
         """Create all the frames for the UI."""
         # Top frame for queue operations
         self.top_frame = ttk.Frame(self.root, padding=10)
         
         # API settings frame
         self.api_frame = ttk.LabelFrame(self.root, text="API Settings", padding=10)
         
+        # Item selection frame (NEW)
+        self.selection_frame = ttk.LabelFrame(self.root, text="Item Selection", padding=10)
+        
         # Middle frame for current item display
         self.item_frame = ttk.LabelFrame(self.root, text="Current Item", padding=10)
         
@@ -141,6 +148,7 @@ class EbayLLMProcessor:
         # Layout main frames
         self.top_frame.pack(fill=tk.X, pady=5)
         self.api_frame.pack(fill=tk.X, pady=5, padx=10)
+        self.selection_frame.pack(fill=tk.X, pady=5, padx=10)
         self.item_frame.pack(fill=tk.X, pady=5, padx=10)
         self.photo_frame.pack(fill=tk.BOTH, expand=True, pady=5, padx=10)
         self.progress_frame.pack(fill=tk.X, pady=5, padx=10)
@@ -173,6 +181,30 @@ class EbayLLMProcessor:
         
         self.queue_status_label = ttk.Label(self.top_frame, text="Queue: 0 items (0 processed)")
         self.queue_status_label.pack(side=tk.RIGHT, padx=5)
+        
+        # Item selection widgets (NEW)
+        selection_controls_frame = ttk.Frame(self.selection_frame)
+        selection_controls_frame.pack(fill=tk.X, pady=5)
+        
+        self.select_all_btn = ttk.Button(selection_controls_frame, text="Select All", command=self.select_all_items)
+        self.select_all_btn.pack(side=tk.LEFT, padx=5)
+        
+        self.deselect_all_btn = ttk.Button(selection_controls_frame, text="Deselect All", command=self.deselect_all_items)
+        self.deselect_all_btn.pack(side=tk.LEFT, padx=5)
+        
+        self.select_unprocessed_btn = ttk.Button(selection_controls_frame, text="Select Unprocessed", command=self.select_unprocessed_items)
+        self.select_unprocessed_btn.pack(side=tk.LEFT, padx=5)
+        
+        self.selection_status_label = ttk.Label(selection_controls_frame, text="0 items selected")
+        self.selection_status_label.pack(side=tk.LEFT, padx=20)
+        
+        # Create scrollable frame for item checkboxes
+        self.items_canvas = tk.Canvas(self.selection_frame, height=150)
+        self.items_scrollbar = ttk.Scrollbar(self.selection_frame, orient="vertical", command=self.items_canvas.yview)
+        self.items_scrollable_frame = ttk.Frame(self.items_canvas)
+        self.items_canvas.configure(yscrollcommand=self.items_scrollbar.set)
+        self.items_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
+        self.items_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
         
         # API settings widgets
         ttk.Label(self.api_frame, text="API Type:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
@@ -261,7 +293,7 @@ class EbayLLMProcessor:
         self.time_remaining_label = ttk.Label(self.progress_frame, text="")
         self.time_remaining_label.pack(side=tk.LEFT, padx=5)
         
-        self.start_btn = ttk.Button(self.progress_frame, text="Start Processing", command=self.start_processing)
+        self.start_btn = ttk.Button(self.progress_frame, text="Process Selected", command=self.start_processing_selected)
         self.start_btn.pack(side=tk.LEFT, padx=5)
         
         self.stop_btn = ttk.Button(self.progress_frame, text="Stop", command=self.stop_processing, state=tk.DISABLED)
@@ -421,6 +453,7 @@ class EbayLLMProcessor:
             
             # Update UI
             self.update_queue_status()
+            self.update_item_selection_list()
             
             # Start at first item
             self.current_item_index = 0
@@ -461,6 +494,7 @@ class EbayLLMProcessor:
                 self.log(f"Queue reloaded successfully. {len(self.work_queue)} items in queue.")
                 
                 self.update_queue_status()
+                self.update_item_selection_list()
                 
                 # Stay on same item if possible
                 if self.current_item_index >= len(self.work_queue):
@@ -488,6 +522,7 @@ class EbayLLMProcessor:
                 
                 self.work_queue = []
                 self.update_queue_status()
+                self.update_item_selection_list()
                 self.current_item_index = -1
                 self.current_photo_index = -1
                 self.display_current_item()
@@ -514,6 +549,90 @@ class EbayLLMProcessor:
             total=len(self.work_queue),
             processed=processed_count
         ))
+        
+    def update_item_selection_list(self):
+        """Update the item selection checkboxes list."""
+        # Clear existing checkboxes
+        for widget in self.items_scrollable_frame.winfo_children():
+            widget.destroy()
+        self.item_checkboxes.clear()
+        
+        # Create new checkboxes for each item
+        for i, item in enumerate(self.work_queue):
+            item_frame = ttk.Frame(self.items_scrollable_frame)
+            item_frame.pack(fill=tk.X, pady=2)
+            
+            # Create checkbox variable
+            var = tk.BooleanVar(value=i in self.selected_items)
+            
+            # Create checkbox
+            cb = ttk.Checkbutton(
+                item_frame,
+                text=f"Item {i+1}: {item.get('temp_title', item.get('title', 'Untitled'))} (SKU: {item.get('sku', 'N/A')})",
+                variable=var,
+                command=lambda idx=i, v=var: self.toggle_item_selection(idx, v)
+            )
+            cb.pack(side=tk.LEFT, fill=tk.X, expand=True)
+            
+            # Add status indicator
+            status = "✓" if any(photo.get('processed', False) for photo in item.get('photos', [])) else "□"
+            status_label = ttk.Label(item_frame, text=status, foreground="green" if status == "✓" else "gray")
+            status_label.pack(side=tk.RIGHT, padx=5)
+            
+            self.item_checkboxes[i] = var
+        
+        # Update canvas scroll region
+        self.items_scrollable_frame.update_idletasks()
+        self.items_canvas.create_window((0, 0), window=self.items_scrollable_frame, anchor="nw")
+        self.items_canvas.configure(scrollregion=self.items_canvas.bbox("all"))
+        
+        # Update selection status
+        self.update_selection_status()
+    
+    def toggle_item_selection(self, index, var):
+        """Toggle item selection."""
+        if var.get():
+            self.selected_items.add(index)
+        else:
+            self.selected_items.discard(index)
+        self.update_selection_status()
+    
+    def select_all_items(self):
+        """Select all items."""
+        self.selected_items = set(range(len(self.work_queue)))
+        for i, var in self.item_checkboxes.items():
+            var.set(True)
+        self.update_selection_status()
+    
+    def deselect_all_items(self):
+        """Deselect all items."""
+        self.selected_items.clear()
+        for var in self.item_checkboxes.values():
+            var.set(False)
+        self.update_selection_status()
+    
+    def select_unprocessed_items(self):
+        """Select only unprocessed items."""
+        self.selected_items.clear()
+        for i, item in enumerate(self.work_queue):
+            # Check if any photo is processed
+            if not any(photo.get('processed', False) for photo in item.get('photos', [])):
+                self.selected_items.add(i)
+                if i in self.item_checkboxes:
+                    self.item_checkboxes[i].set(True)
+            else:
+                if i in self.item_checkboxes:
+                    self.item_checkboxes[i].set(False)
+        self.update_selection_status()
+    
+    def update_selection_status(self):
+        """Update the selection status label."""
+        count = len(self.selected_items)
+        self.selection_status_label.config(text=f"{count} items selected")
+        
+        # Enable/disable process button based on selection
+        if count > 0 and not self.processing:
+            self.start_btn.config(state=tk.NORMAL)
+        else:
+            self.start_btn.config(state=tk.DISABLED if self.processing else tk.NORMAL)
     
     def prev_item(self):
         """Navigate to the previous item."""
@@ -1148,6 +1267,41 @@ class EbayLLMProcessor:
             self.stop_btn.config(state=tk.DISABLED)
             self.log("Processing stopped.")
             logger.info("Processing stopped by user")
+    
+    def start_processing_selected(self):
+        """Start processing only selected items."""
+        if not self.selected_items:
+            messagebox.showwarning("No Selection", "Please select at least one item to process.")
+            return
+        
+        # Create a subset queue with only selected items
+        selected_queue = [self.work_queue[i] for i in sorted(self.selected_items)]
+        
+        # Confirm with user
+        response = messagebox.askyesno(
+            "Confirm Processing",
+            f"Process {len(selected_queue)} selected items?"
+        )
+        
+        if response:
+            # Temporarily store original queue
+            original_queue = self.work_queue
+            original_index = self.current_item_index
+            
+            # Set selected items as the queue
+            self.work_queue = selected_queue
+            self.current_item_index = 0
+            
+            # Start processing
+            self.start_processing()
+            
+            # After processing completes, we'll need to restore the original queue
+            # This would be done in the process_queue method when processing completes
+            self._original_queue = original_queue
+            self._original_index = original_index
+            self._selected_indices = sorted(self.selected_items)
+        else:
+            self.log("Processing cancelled.")
         
     def process_queue(self):
         """
@@ -1168,8 +1322,17 @@ class EbayLLMProcessor:
         
         # Process each item in the queue
         for i in range(self.current_item_index, len(self.work_queue)):
             if self.thread_stop_flag:
                 break
+                
+            # If we're processing a selected subset, restore original queue at the end
+            if hasattr(self, '_original_queue') and i == len(self.work_queue) - 1:
+                # Save the processed items back to original queue
+                for idx, processed_item in enumerate(self.work_queue):
+                    self._original_queue[self._selected_indices[idx]] = processed_item
+                
+                # Restore original queue
+                self.work_queue = self._original_queue
+                self.current_item_index = self._original_index
+                delattr(self, '_original_queue')
                 
             # Jump to the item
             self.current_item_index = i

--- a/windows_installer/ebay_processor.bat
+++ b/windows_installer/ebay_processor.bat
@@ -10,7 +10,7 @@ echo.
 :: Try different Python commands
 python --version >nul 2>&1
 if %errorlevel% == 0 (
-    python -m ebay_tools.apps.process_ebay
+    python -m ebay_tools.apps.processor
     goto :end
 )
 
 py --version >nul 2>&1
 if %errorlevel% == 0 (
-    py -m ebay_tools.apps.process_ebay
+    py -m ebay_tools.apps.processor
     goto :end
 )
 
 python3 --version >nul 2>&1
 if %errorlevel% == 0 (
-    python3 -m ebay_tools.apps.process_ebay
+    python3 -m ebay_tools.apps.processor
     goto :end
 )

--- a/windows_installer/ebay_viewer.bat
+++ b/windows_installer/ebay_viewer.bat
@@ -10,7 +10,7 @@ echo.
 :: Try different Python commands
 python --version >nul 2>&1
 if %errorlevel% == 0 (
-    python -m ebay_tools.apps.view_ebay
+    python -m ebay_tools.apps.viewer
     goto :end
 )
 
 py --version >nul 2>&1
 if %errorlevel% == 0 (
-    py -m ebay_tools.apps.view_ebay
+    py -m ebay_tools.apps.viewer
     goto :end
 )
 
 python3 --version >nul 2>&1
 if %errorlevel% == 0 (
-    python3 -m ebay_tools.apps.view_ebay
+    python3 -m ebay_tools.apps.viewer
     goto :end
 )

--- a/windows_installer/ebay_setup.bat
+++ b/windows_installer/ebay_setup.bat
@@ -10,7 +10,7 @@ echo.
 :: Try different Python commands
 python --version >nul 2>&1
 if %errorlevel% == 0 (
-    python -m ebay_tools.apps.setup_ebay
+    python -m ebay_tools.apps.setup
     goto :end
 )
 
 py --version >nul 2>&1
 if %errorlevel% == 0 (
-    py -m ebay_tools.apps.setup_ebay
+    py -m ebay_tools.apps.setup
     goto :end
 )
 
 python3 --version >nul 2>&1
 if %errorlevel% == 0 (
-    python3 -m ebay_tools.apps.setup_ebay
+    python3 -m ebay_tools.apps.setup
     goto :end
 )

--- a/windows_installer/ebay_price.bat
+++ b/windows_installer/ebay_price.bat
@@ -10,7 +10,7 @@ echo.
 :: Try different Python commands
 python --version >nul 2>&1
 if %errorlevel% == 0 (
-    python -m ebay_tools.apps.price_ebay
+    python -m ebay_tools.apps.price_analyzer
     goto :end
 )
 
 py --version >nul 2>&1
 if %errorlevel% == 0 (
-    py -m ebay_tools.apps.price_ebay
+    py -m ebay_tools.apps.price_analyzer
     goto :end
 )
 
 python3 --version >nul 2>&1
 if %errorlevel% == 0 (
-    python3 -m ebay_tools.apps.price_ebay
+    python3 -m ebay_tools.apps.price_analyzer
     goto :end
 )